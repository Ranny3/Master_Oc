Primeiro coloca o dado no formato csv
abre o matlab e procura a pasta em que o arquivo está
# Prestar atenção se as colunas estão com a descriçã de categorial e não numerical, pois essa não pode ter letra
Mas a função plot não ler categorial#
seleciona as 3 colunas que serão usadas somente com os números
Clique em Import Selection
 Use o script
plot funciona em arrays não em table 
----------------------------------------------------------------------------------------------------------
2 - 2 ou mais perfis
% carrega os arquivos
data1 = readtable('nomedoarquivo.csv');
data2 = readtable('nomedoarquivo.csv');

% Extrai as variaveis%
x1 = data1.x;
z1 = data1.z;
x2 = data2.x;
z2 = data2.z;

#Mudar o x e z de acordo com o nome dado para os seus datasets criados#
-----------------------------------------------------------------------------------------------------------
#Caso a tabela utilizada não tenha na primeira linha identificando qual coluna é cada variável#
%Carrega o arquivo com os dados

subseteta79 = ETA79S;
% Mude o número após o : para a coluna que quer extrair
x13 = line1.xyzdata.data206(:, 1);
z13 = line1.xyzdata.data206(:, 3);

% Caso não queira extrair a coluna inteira, defina as linhas
startRow = 17;
endRow = 107;

% Extrai as linhas designadas da tabela
subseteta79 = ETA79S(startRow:endRow, :);

% Mude o número após o : para a coluna que quer extrair

---------------------------------------------------------------------------------------------------
% Se tiver 3 perfis juntos x1, x2, x3, z1, z2, z3

% Plota a 1° set of data
plot(x1, z1, '-o', 'LineWidth', 2);
hold on;

% Plota a 2° set of data
plot(x2, z2, '-x', 'LineWidth', 2);

%Adicionar mais de acordo com a quant.)

% Add axis labels
xlabel('Distância (m)');
ylabel('Profundidade (m)');

% Add a legend
legend('11/1981', '12/1981');
% Add a title
title('Transecto -91');

% Adjust the position of the title (optional)
titlePos = get(gca, 'Title');
titlePos.Position(2) = titlePos.Position(2) + 0.05;
set(gca, 'Title', titlePos);

-------------------------------------------------------------------------------------------
% Specify the path to the NetCDF file
filename2 = 'B:\Cassie-core_Larissa_2023\03_temp\Transects_survey_19740506.nc';

% Read the contents of the NetCDF file
data = ncread(filename);

% View the variable names and dimensions in the file
disp(data);
---------------------------- OR -------------------------------------
% Open the NetCDF file and retrieve the variable information
info = ncinfo(filename2);

% Read the contents of the NetCDF file
data2 = ncread(filename2, info.Variables(1).Name);

% View the variable data
disp(data);
-----------------------------------------------------------------------------------------
% Dados de entrada: coordenadas x e z dos transectos
x1 = [0, 10, 20, 30, 40]; % coordenadas x do primeiro transecto
z1 = [5, 4, 3, 2, 1];     % profundidades correspondentes do primeiro transecto
x2 = [0, 10, 20, 30, 40]; % coordenadas x do segundo transecto
z2 = [6, 5, 4, 3, 2];     % profundidades correspondentes do segundo transecto

% Gerar os transectos
figure;
plot(x1, z1, 'b.-', 'LineWidth', 2);
hold on;
plot(x2, z2, 'r.-', 'LineWidth', 2);
xlabel('Distância (m)');
ylabel('Profundidade (m)');
title('Transectos Batimétricos');
legend('Transecto 1', 'Transecto 2');
grid on;

-------------------------------------------------------------------------
% Calcular a área entre os transectos
area_entre_transectos = trapz(x1, z1) - trapz(x2, z2);

disp(['A área entre os transectos é: ', num2str(area_entre_transectos), ' metros cúbicos.']);

------------------------------------------------------------------------------------------
% Gerar mais de 2 perfis ao mesmo tempo
% Plot só funciona com array e não table
% Convert table variables to arrays
x1 = table2array(x1);
z1 = table2array(z1);
x2 = table2array(x2);
z2 = table2array(z2);
x3 = table2array(x3);
z3 = table2array(z3);
x4 = table2array(x4);
z4 = table2array(z4);
x5 = table2array(x5);
z5 = table2array(z5);

% Plot the profiles
plot(x1, z1, '-o', 'LineWidth', 2);  % First profile
hold on;
plot(x2, z2, '-x', 'LineWidth', 2);  % Second profile
plot(x3, z3, '-s', 'LineWidth', 2);  % Third profile
plot(x4, z4, '-^', 'LineWidth', 2);  % Fourth profile
plot(x5, z5, '-d', 'LineWidth', 2);  % Fifth profile

% Add axis labels and legend
xlabel('x');
ylabel('z');
legend('Profile 1', 'Profile 2', 'Profile 3', 'Profile 4', 'Profile 5');

% Add a title
title('ETA*');
----------------------------------------------------------------------------------------------------
% Mudança do volume colocada como espectro de onda no eixo y, volume horizontal
volume_change = z2 - z1;

% Calculate x-axis distances
distance = x1;

% Plotting
figure;
hold on;

% Plot the filled area below the volume change line
fill([distance; flip(distance)], [zeros(size(volume_change)); flip(volume_change)], 'b', 'EdgeColor', 'none', 'FaceAlpha', 0.3);

% Plot the volume change line
plot(distance, volume_change, 'b.-', 'LineWidth', 1.5);

% Plot the central zero line
plot([min(distance), max(distance)], [0, 0], 'k--', 'LineWidth', 1.5);

hold off;

% Set labels and title
xlabel('Distância (m)');
ylabel('Mudança de Volume (m³)');
title('Volume Change -91');

% Add legend
legend('Volume Change', 'Zero Line');

% Adjust y-axis limits
ylim([min(volume_change) - 1, max(volume_change) + 1]);

------------------------------------------------------------------------------------
%Volume Vertical em pontos
% Calculate change in volume
volume_change = z2 - z1;

% Depth values
depth = 1:numel(z2); % Assuming equal depth intervals between data points

% Plotting the comparison
figure;
hold on;

% Zero central line
plot([0, 0], [min(depth), max(depth)], 'k--');

% Change in volume
plot(volume_change, depth, 'bo-');

% Set labels and title
xlabel('Change in Volume');
ylabel('Depth');
title('Comparison of Beach Profile Data');

% Set axis limits
xlim([min(volume_change) - 1, max(volume_change) + 1]);
ylim([min(depth), max(depth)]);

% Show grid
grid on;

% Show legend
legend('Zero Central Line', 'Change in Volume');  

% Hold off from further plotting
hold off;
-------------------------------------------------------------------------------------------
%Volume Vertical em barrras
% Calculate change in volume
volume_change = z2 - z1;

% Depth values
depth = 1:numel(z2); % Assuming equal depth intervals between data points

% Plotting the comparison
figure;
hold on;

% Zero central line
plot([0, 0], [min(depth), max(depth)], 'k--');

% Change in volume represented as bars
barh(depth, volume_change, 'b');

% Set labels and title
xlabel('Mudança de Volume (m³)');
ylabel('Profundidade (m)');
title('Mudança de Volume -91');

% Set axis limits
xlim([min(volume_change) - 1, max(volume_change) + 1]);
ylim([min(depth), max(depth)]);


%% Adicionar a função Invert y-axis se quiser que o eixo y estiver ao contrário
set(gca, 'YDir', 'reverse');

% Show grid
grid on;

% Hold off from further plotting
hold off;
--------------------------------------------------------------------------------------------
%Plotar os três gráficos juntos

% Definir as variáveis distance, volume_change e depth 
distance = x*;
volume_change = z* - z*;
depth = 1:numel(z*);

% Plot 1° subplot
subplot(1, 3, 1);
hold on;

% Linha central zero
plot([0, 0], [min(depth), max(depth)], 'k--');

% Mudança de volume representada em barras
barh(depth, volume_change, 'b');

% Set limites e legendas
xlabel('Mudança de Volume (m³)');
ylabel('Profundidade (m)');

xlim([min(volume_change) - 1, max(volume_change) + 1]);
ylim([min(depth), max(depth)]);


% Adicionar a função Invert y-axis caso o eixo y estiver ao contrário do desejado
%set(gca, 'YDir', 'reverse');

% Show grid
grid on;

% Hold off para os subplots seguintes
hold off;

sgtitle('Transecto ***', 'FontSize', 16);
subplot(1, 3, 2);
hold on;

% Plot a área abaixo da linha de volume preenchidas
fill([distance; flip(distance)], [zeros(size(volume_change)); flip(volume_change)], 'b', 'EdgeColor', 'none', 'FaceAlpha', 0.3);

% Plot a linha de mudança volume
plot(distance, volume_change, 'b.-', 'LineWidth', 1.5);

% Plot a linha central zero 
plot([min(distance), max(distance)], [0, 0], 'k--', 'LineWidth', 1.5);

hold off;

% Set títulos
xlabel('Distância (m)');
ylabel('Mudança de Volume (m³)');


% Ajuste do limite do eixo y
ylim([min(volume_change) - 1, max(volume_change) + 1]);

subplot(1, 3, 3);
hold on;
% Plota a 1° set of data
plot(x1, z1, '-o', 'LineWidth', 2);
hold on;

% Plota a 2° set of data
plot(x2, z2, '-x', 'LineWidth', 2);


% Adicione legenda
legend('***', '***');

% Ajuste da posição dos títulos (opicional)
titlePos = get(gca, 'Title');
titlePos.Position(2) = titlePos.Position(2) + 0.05;
set(gca, 'Title', titlePos);

-----------------------------------------------------------------------
% Prisma Praial

% Create a cell array to store x and z datasets
xData = {x1, x2, x3,x4, x5, x6, x7, x8, x9, x10...xn}
zData = {z1, z2, z3, z4, z5, z6, z7, z8, z9, z10...zn}
figure;
hold on;

% Iterate over each dataset and plot the beach profiles
for i = 1:numel(xData)
    plot(xData{i}, zData{i});
end

hold off;

title('Transecto 2102');
xlabel('Distância (m)');
ylabel('Profundidade (m)');
grid on;
% Adjust the axes limits according to your data
axis([min max min max]);
                                            -----------------
% Prisma Praial pelo código do Cohn
% URL do conjunto de dados de morfologia
url = 'https://chldata.erdc.dren.mil/thredds/dodsC/frf/geomorphology/elevationTransects/survey/surveyTransects.ncml';

% Baixando todos os dados de morfologia (isso pode levar alguns minutos)
x = ncread(url, 'xFRF'); % Coordenadas X
y = ncread(url, 'yFRF'); % Coordenadas Y
z = ncread(url, 'elevation'); % Elevação
profNum = ncread(url, 'profileNumber'); % Número do perfil
surveyNum = ncread(url, 'surveyNumber'); % Número da pesquisa
date = ncread(url, 'date'); % Data

% Subconjunto dos dados por data
unique_dates = unique(surveyNum); % Encontrar datas únicas
for idx = 1:numel(unique_dates)
    ifind = find(surveyNum == unique_dates(idx)); % Encontrar índices correspondentes à data
    xyz = [x(ifind) y(ifind) z(ifind)]; % Coordenadas XYZ correspondentes à data
    eval(['morph.data.xyz', num2str(idx), ' = xyz;']); % Armazenar as coordenadas XYZ em uma estrutura
    morph.dates(idx) = round(nanmean(date(ifind))/86400 + datenum(1970,1,1)); % Calcular a média das datas em segundos e convertê-las para números de série do MATLAB        
end

% Subconjunto dos dados por transecto e data
y_lines = [-91 -46 1 46 91 137 183 229 274 320 366 411 457 509 517 524 558 594 640 686 731 777 823 869 914 951 960 1006 1337 1277 1217 1157 1052 1097 927];
dist_thresh = 5; % Limiar de distância
for idate = 1:numel(morph.dates)
    eval(['inp = morph.data.xyz', num2str(idate),';']); % Coordenadas XYZ correspondentes à data
    for iline = 1:numel(y_lines)
        iuse = find(inp(:,2)>[y_lines(iline)-dist_thresh] & inp(:,2)<[y_lines(iline)+dist_thresh]); % Índices correspondentes ao transecto
        eval(['line', num2str(iline), '.xyzdata.data', num2str(idate), '= inp(iuse, 1:3);']); % Armazenar os dados do transecto em uma estrutura
        eval(['line', num2str(iline), '.xyzdata.data', num2str(idate), '(:,2) = y_lines(iline);']); % Atribuir a coordenada Y do transecto aos dados
        eval(['line', num2str(iline), '.xyzdates = morph.dates;']); % Armazenar as datas
    end
end

% Exemplo de gráfico para confirmar o funcionamento
cmap = jet(numel(morph.dates)); % Mapa de cores
lineNum = 10; % Número do transecto
figure,
hold on
for itime = 1:numel(morph.dates)
    tempdata = eval(['line', num2str(lineNum),'.xyzdata.data', num2str(itime)]); % Dados do transecto em um tempo específico
    plot(tempdata(:,1), tempdata(:,3), '.', 'Color', cmap(itime,:)) % Plotar os dados
end
xlabel('Distância (m)') % Rótulo do eixo X
ylabel('Elevação (m, NAVD88)') % Rótulo do eixo Y
grid on
xlim([0 1000]) % Limites do eixo X
ylim([-10 10]) % Limites do eixo Y
---------------------------------------------------------------------------------------
% Retirar os datasets vazios %% Cria uma nova estrutura para armazenar os dados não vazios

newline13.xyzdata = struct();

% Itera através dos números de data de 1 a 1166
for i = 1:1166
    % Gera o nome do campo (data1, data2, ..., data1166)
    fieldName = ['data', num2str(i)];
    
    % Verifica se o campo existe na estrutura e se não está vazio
    if isfield(line13.xyzdata, fieldName) && ~isempty(line13.xyzdata.(fieldName))
        % Se o campo existe e não está vazio, copia-o para a nova estrutura
        newline13.xyzdata.(fieldName) = line13.xyzdata.(fieldName);
    end
end


-----------------------------------------------------------------------------------
% Extrair o x

% Get the fieldnames 
fieldNames = fieldnames(newLine43.xyzdata);

% Initialize a cell array to store the extracted columns
extractedColumns = cell(1, numel(fieldNames));

% Iterate through the fieldnames and extract the first column of each dataset
for i = 1:numel(fieldNames)
    fieldName = fieldNames{i};
    dataset = newLine43.xyzdata.(fieldName);
    
    % Extract the first column of the dataset and store it in the cell array
    extractedColumns{i} = dataset(:, 1);
end

% Assign variables using a loop
for i = 1:numel(extractedColumns)
    variableName = sprintf('x%d', i);
    eval([variableName, ' = extractedColumns{', num2str(i), '};']);
end

-----------------------------------------
% Extrair o z se o formato de inserção for uma célula 

fieldNames = fieldnames(newLine42.xyzdata);

% Initialize a cell array to store the extracted columns
extractedColumns = cell(1, numel(fieldNames));

% Iterate through the fieldnames and extract the third column of each dataset
for i = 1:numel(fieldNames)
    fieldName = fieldNames{i};
    dataset = newLine42.xyzdata.(fieldName);
    
    % Extract the third column of the dataset and store it in the cell array
    extractedColumns{i} = dataset(:, 3);
end

% Assign variables using a loop
for i = 1:numel(extractedColumns)
    variableName = sprintf('z%d', i);
    eval([variableName, ' = extractedColumns{', num2str(i), '};']);
end


-----------------------------------------------------------------------------------
% Interpolação de cada dado invidualmente

% Load the data from line11.xyzdata.data151
l13 = line13.xyzdata.data152;

% Sort the data based on the first column
sorted_data = sortrows(l13, 1);

% Interpolate the first column to have 1000 points
x152 = linspace(min(sorted_data(:,1)), max(sorted_data(:,1)), 1000);
interpolated_col1 = interp1(sorted_data(:,1), sorted_data(:,1), x152);

% Interpolate the third column to have 1000 points
z152 = linspace(min(sorted_data(:,1)), max(sorted_data(:,3)), 1000);
interpolated_col3 = interp1(sorted_data(:,1), sorted_data(:,3), x152);

% Plot the original and interpolated data
figure;
subplot(2,1,1);
plot(sorted_data(:,1), sorted_data(:,3), 'bo', 'DisplayName', 'Original Data');
hold on;
plot(x152, interpolated_col3, 'r-', 'DisplayName', 'Interpolated Data');
xlabel('Column 1');
ylabel('Column 3');
title('Interpolation of Column 3');
legend;


subplot(2,1,2);
plot(sorted_data(:,1), sorted_data(:,1), 'bo', 'DisplayName', 'Original Data');
hold on;
plot(x152, interpolated_col1, 'r-', 'DisplayName', 'Interpolated Data');
xlabel('Column 1');
ylabel('Column 1');
title('Interpolation of Column 1');
legend;
                                                     -----




------------------------------------------------------------------------------
% Maximum e minímo



----------------------------------
% Médio 



--------------------------------------------------------------------------------------------
 #########Surperfície
% Dados de exemplo (substitua esses valores pelos seus dados reais)
x = linspace(1, 35, 10); % Exemplo: coordenadas x
z = linspace(1, 35, 10); % Exemplo: coordenadas z
values = rand(10, 10); % Exemplo: valores associados às coordenadas (substitua pelos seus próprios dados)

% Definir a grade para a interpolação
[X, Z] = meshgrid(linspace(1, 35, 100), linspace(1, 35, 100));

% Interpolar os valores usando griddata
interpolated_values = griddata(x, z, values, X, Z, 'cubic');

% Transpor os dados interpolados para que o eixo vertical seja Y
interpolated_values = interpolated_values';

% Plotar a superfície interpolada
figure;
surf(X, Z, interpolated_values);

% Adicionar rótulos aos eixos
xlabel('Eixo X');
ylabel('Eixo Z');
zlabel('Valores Interpolados');
title('11/07/1990');

% Adicionar uma barra de cor para indicar os valores da superfície
colorbar;

% Ajustar a visualização da perspectiva
view(45, 30);

% Adicionar uma grade para facilitar a visualização
grid on;
