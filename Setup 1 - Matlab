function [x_array, h_array] = barProfilefunction(xc_option, xt, xc, xf, h0, hinf, xinf, last_bar)
    % Eq.1 Bruun equation:
    if xc_option == 1
        hc = 0.106 * xc^(2/3); % parameters for Gold Coast region
    % Silvester e Hsu equations:
    % Eq.2
    elseif xc_option == 2
        hc = 0.111 * xc^0.575;
    % Eq.3
    elseif xc_option == 3
        hc = 0.0225 * xc;
    end

    % Eq.4
    tanB = hc / (0.6366 + (0.436 * xc));

    % Eq.5
    he = xt * tanB; % falta xt ou he

    % Eq.6
    X = xt;
    d = 0.125 * X^0.667;

    % Cabellaria et al.:
    % Eq.7 (x >= x_t)
    ht = d;
    x_array = [];
    h_array = [];
    h5_list = [];
    x5_list = [];
    for x = 0:0.5:xt
        h = ((h0 - ht) * (((x - xt)^2) / (xt^2)) + ht);
        x_array = [x_array, x];
        h_array = [h_array, -h];
        h5_list = [h5_list, -h];
        x5_list = [x5_list, x];
    end
    equation5 = [h5_list; x5_list];

    % Eq.8 (x_t < x >= x_m)
    h6_list = [];
    x6_list = [];
    for x = xt:0.5:xm
        h = ((hc - ht) * (((x - xt)^2) / ((xm - xt) * (xc - xt))) + ht);
        x_array = [x_array, x];
        h_array = [h_array, -h];
        h6_list = [h6_list, -h];
        x6_list = [x6_list, x];
    end
    equation6 = [h6_list; x6_list];

    % Eq.9 (x_m < x >= x_c)
    h7_list = [];
    x7_list = [];
    for x = xm:0.5:xc
        h = ((hc - ht) * (((x - xc)^2) / ((xm - xc) * (xc - xt))) + hc);
        x_array = [x_array, x];
        h_array = [h_array, -h];
        h7_list = [h7_list, -h];
        x7_list = [x7_list, x];
    end
    equation7 = [h7_list; x7_list];

    % Eq.10 (x_c < x >= x_f)
    X = xf;
    d = 0.125 * X^0.667;
    hf = d;
    h8_list = [];
    x8_list = [];
    for x = xc:0.5:xf
        h = ((hf - hc) * (((x - xc)^2) / ((xf - xc)^2)) + hc);
        h8_list = [h8_list, -h];
        x8_list = [x8_list, x];
        x_array = [x_array, x];
        h_array = [h_array, -h];
    end
    equation8 = [h8_list; x8_list];

    % Eq.11 (x_f >= x)
    if last_bar
        hinf = abs(hinf);
        h9_list = [];
        x9_list = [];
        for x = xf:0.5:xinf
            A = -2 * ((x - xf) * (hf - hc)) / ((xf - xc) * (hinf - hf));
            B = exp(A);
            C = 1 - B;
            D = (hinf - hf) * C;
            E = D + hf;
            h9_list = [h9_list, -E];
            x9_list = [x9_list, x];
            x_array = [x_array, x];
            h_array = [h_array, -E];
        end
        equation9 = [h9_list; x9_list];
    end

    x_array = x_array';
    h_array = h_array';
end
